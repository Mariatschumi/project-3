/*Δημιουργούμε πρώτα έναν διαδραστικό χάρτη, ο οποίος συλλέγει δεδομένα από το χρήστη και τα αποθηκεύει, προκειμένου να δημιουργηθεί μια βάση δεδομένων στο Github και να μπορούμε να έχουμε πρόσβαση σε αυτά μετά.Ο χρήστης προσκαλείται να ηχογραφήσει μια μουσική τη στιγμή που συμβαίνει στην πόλη ή να ανεβάσει μια φωτογραφία από τη μουσική. Πρώτα πατάει τα αντίστοιχα κουμπιά και μετά διαλέγει ένα κελί για να καταγραφεί γεωγαφικά το γεγονός. */

//Ορίζουμε τις μεταβλητές

//Μεταβλητές για τον κάνναβο
let cols = 25;
let rows = 15;
let mygrid = [];
let imgmap;

//Μεταβλητή για κλικ
let clickCounts = [];

//Μεταβλητές για ήχο
let sounds = [];
let vol;
let soundrecord;
let recorder;
let  button;
let isRecording = false;
let eventsound;

//Μεταβλητές για εικόνες
let images = [];
let uploadButton;
let input;
let uploadedImage;
let imgUploadFinished = false;
let uploadPhoto;
let img;
let soundImage;



//Ανεβάζουμε αρχικά την εικόνα του χάρτη
function preload() {
    imgmap = loadImage('https://mariatschumi.github.io/project-3/photos/map%20athens.jpg');
}

//Φτιάχνουμε τον αρχικό κάναβο μέσα από τον ορισμό των κελιών που δημιουργούνται από τα cols=στήλες και rows=γραμμές.
function createGrid() {
    let cellWidth = imgmap.width / cols;
    let cellHeight = imgmap.height / rows;

    for (let i = 0; i < cols; i++) {
        let x = i * cellWidth;
      
        for (let j = 0; j < rows; j++) {
            let y = j * cellHeight;
          
          stroke(255);
            strokeWeight(2);
            noFill();
            rect(x+cellWidth, y+cellHeight, cellWidth, cellHeight);
        }
    }
  
  //Για να ξέρει ο χρήστης τις συντεταγμένες που θα ανεβάσει τη φωτογραφία ή τον ήχο, αναγράφονται τα i,j πάνω και αριστερά
  textAlign(CENTER,CENTER);
  textSize(15);
  fill('cornflowerblue');
  noStroke();
  
  //Το i=0 και j=0 δεν αποτελούν μέρος του κανάβου
  for (let i = 1; i < cols; i++) {
    let x = i * cellWidth;
    text(i,x+cellWidth/2,25);}
  for (let j = 1; j < rows+1; j++) {
            let y = j * cellHeight;
          text(j,25,y+cellHeight/2);}
}

//Ορίζουμε τον καμβά μεγαλύτερο από την εικόνα και τοποθετούμε την εικόνα. Κάνουμε εκκίνηση στις μεταβλητές που θα χρειαστούν στη συνέχεια.
function setup() {
  
    createCanvas(imgmap.width+width/cols, imgmap.height+200); 
    image(imgmap, width/cols, imgmap.height/rows);
 
  recorder = new p5.SoundRecorder();
  soundrecord= new p5.SoundFile();
  
  // Αφήνουμε να χρησιμοποιήσει το μικρόφωνο του χρήστη
  let mic = new p5.AudioIn();
  mic.start();
  recorder.setInput(mic);
  createGrid();
  soundphotocell();
  
  //Κατασκευάζουμε τα κουμπιά στο κάτω μέρος του καμβά
  button = createButton('RECORD YOUR EVENT');
  button.position(width/cols,imgmap.height+100);
  button.mousePressed(toggleRecording);
  
   uploadButton = createButton('UPLOAD YOUR PHOTO');
    uploadButton.position(width/cols, imgmap.height + 150);
    uploadButton.mousePressed(openFileDialog);

  //Απαραίτητο για να κάνει ο χρήστης upload τη φωτογραφία, του εμφανίζεται ο φάκελος.
    input = createFileInput(handleFile);
    input.position(width/cols, imgmap.height + 130);
    input.hide(); 

}

// Απαραίτητο για τη διαχείριση της φωτογραφίας. Για αυτό χρησιμοποιήθηκε βοήθεια από chat.gpt
function openFileDialog() {
    input.show();
    input.elt.click(); // όταν πατηθεί η φωτογραφία, κλείνει το αρχείο
    input.hide(); 
}

// Απαραίτητο για τη διαχείριση της φωτογραφίας. Ενημέρωση του χρήστη για το Upload, και πρόσκληση να κάνει κλικ σε ένα κελί. 
function handleFile(file) {
  //Για αυτό χρησιμοποιήθηκε βοήθεια από chat.gpt
    if (file.type === 'image') {
        uploadedImage = loadImage(file.data, () => {
        imgUploadFinished = true;
          
      
    //Όταν ανεβαίνει η φωτογραφία ενημερώνει το χρήστη. Δημιουργείται ένα μαύρο κουτί για να κρύβει το προηγούμενο κείμενο, αν υπάρχει.
          fill(0);
      rectMode(CENTER);
      noStroke();
      rect(width/2,imgmap.height+100,textWidth('We have the photo! Now click on the cell you are')*2,50); 
      
  textAlign(CENTER,CENTER);
  textSize(25);
  fill('cornflowerblue');
  noStroke();
        text('We have the photo! Now click on the cell you are',width/2,imgmap.height+100)
        });
    }
}

//Διαχείριση της καταγραφής του ήχου
function toggleRecording() {
  //Αν δε καταγράφεται ο ήχος και πατηθεί το κουμπί αρχίζει η καταγραφή
    if (!isRecording) {
        recorder.record(soundrecord);
        isRecording = true;
        button.html('Stop Recording');
      
    } 
  //Αλλιώς σταματά να κάνει καταγραφή 
  else { recorder.stop();
         isRecording = false;
         recordingFinished = true;
         button.html('RECORD YOUR EVENT');
      
       //Όταν καταγράφεται ο ήχος ενημερώνει το χρήστη. Δημιουργείται ένα μαύρο κουτί για να κρύβει το προηγούμενο κείμενο, αν υπάρχει.
      fill(0);
      rectMode(CENTER);
      noStroke();
      rect(width/2,imgmap.height+100,textWidth('We have the music! Now double click on the cell you are')*2,50); 
        
      textAlign(CENTER,CENTER);
  textSize(25);
  fill('cornflowerblue');
  noStroke();
        text('We have the music! Now double click on the cell you are',width/2,imgmap.height+100)
      
    }
}
  
//Δημιουργούμε 2Darrays για να ορίσουμε κάθε κέλί με  ιδιότητες
function soundphotocell(){
  
    for (let i = 1; i < cols; i++) {
        clickCounts[i] = []; //Καταμέτρηση των κλικ
        sounds[i] = []; 
        images[i] = [];
        for (let j = 1; j < rows; j++) {
            clickCounts[i][j] = 0; //Μετράει πόσα κλικ κάνουμε σε κάθε κελί. Ξεκινά με 0.
        
    //Αν υπάρχει καταγραφή ήχου, τότε κάνει assign σε μια μεταβλητή. Στην αρχή το είχαμε κάνει όπως και στις εικόνες με !null, αλλά δε λειτουργούσε.
       if (soundrecord){
              sounds[i][j] = eventsound;
            }
    // Αν δεν υπάρχει ορίζει τα κελιά με κενό ήχο, ώστε να μη ψάχνει να βρει ήχο.
          else {
                sounds[i][j] = null; 
            }
  //Αντίστοιχα, για τις εικόνες.
          if (uploadedImage){
            images[i][j]=!null;
          }else{ images[i][j] = null; }// Οπότε οι υπόλοιπες εικόνες των κελιών είναι κενές
            
        }
    }
}

//Σε αυτό το function ρυθμίζουμε αν γίνει κλικ μέσα σε ένα κελί να αποθηκέυεται με ένα όνομα που αντιστοιχεί στα i και j του κελιού που έγινε κλικ.
function mouseClicked() {
    let cellWidth = imgmap.width / cols;
    let cellHeight = imgmap.height / rows;

    
   for (let i = 1; i < cols; i++) {
    let x = i * cellWidth;
    
  for (let j = 1; j < rows+1; j++) {
            let y = j * cellHeight;
         
//Ορίζουμε που θα βρίσκεται το ποντίκι μέσα στο κάθε κελί
  if (mouseX>x && mouseX<x+cellWidth && mouseY>y && mouseY<y+cellHeight){
        

// Αν γίνει το δεύτερο κλικ(0,1) και υπάρχει εικόνα τότε αποθηκεύεται η εικόνα στον υπολογιστή με νέο όνομα.
        if (clickCounts[i][j] === 1 && uploadedImage ) {
           images[i][j] = uploadedImage;
            uploadedImage.save(`myImage${i}${j}`);
//Για να καταλάβει ο χρήστης ότι έγινε αποθήκευση αλλάζει το χρώμα του κελιού
        fill(255, 60);
        stroke(255);
        rect(i*cellWidth+cellWidth/2 , j*cellHeight+cellHeight/2 , cellWidth, cellHeight);
        } 
// Αν γίνει το δεύετρο κλικ και υπάρχει ήχος τότε αποθηκεύεται ο ήχος στον υπολογιστή με νέο όνομα.
    if (clickCounts[i][j] === 1 && soundrecord) {
           sounds[i][j] = soundrecord;
            saveSound(soundrecord, `myRecording${i}${j}.wav`);
      
//Για να καταλάβει ο χρήστης ότι έγινε upload αλλάζει το χρώμα του κελιού
        fill(100,100,250);
        stroke(255);
        rect(i*cellWidth+cellWidth/2 , j*cellHeight+cellHeight/2 , cellWidth, cellHeight);
        } 
    
    clickCounts[i][j]++; 
       
    }
}
}
}