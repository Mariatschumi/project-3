//my p5js file
// Define variables
let cols = 10;
let rows = 5;
let subrows = [];
let subcellHeight;
let mygrid = [];

let img;

let clickCounts=[];

let sounds = [];
let sound22;
let sound;
let audiofile;


function preload() {
    // Preload the image
    img = loadImage('https://mariatschumi.github.io/project-3/photos/map%20athens.png');
  sound22 = loadSound('https://mariatschumi.github.io/project-3/sounds/sound22.mp3');

   for (let i = 0; i < cols; i++) {
        sounds[i] = [];
        for (let j = 0; j < rows; j++) {
            let soundFilePath = `https://mariatschumi.github.io/project-3/sounds/sound${i}${j}.mp3`;
            sounds[i][j] = loadSound(soundFilePath);
                if (soundFilePath==true){
                  console.log(`Loaded sound for cell (${i},${j})`); } else {console.log(`Failed to load sound for cell (${i},${j})`) ; }
                
                                     }
                                     }
}


function setup() {
    createCanvas(img.width, img.height);
    background(255);
    image(img, 0, 0);
  
    // Initialize clickCounts array
    for (let i = 0; i < cols; i++) {
        clickCounts[i] = [];
      mygrid[i]=[];
      let x = i*(width/cols);
        for (let j = 0; j < rows; j++) {
          let y = j*(height/rows);
           clickCounts[i][j] = 0;
          let sound = sounds[i][j];
          let audiofile = {
            x,
            y,
            sound};
          mygrid[i][j]=audiofile;
          }
        }
   createGrid();
    }
 


function createGrid() {
    let cellWidth = width / cols;
    let cellHeight = height / rows;
    
    for (let i = 0; i < cols; i++) {
        let x = i * cellWidth;
       subrows[i] = [];
        
        for (let j = 0; j < rows; j++) {
          subrows[i][j] = 5;
            let y = j * cellHeight;
            stroke(255);
          strokeWeight(2);
            noFill();
            rect(x, y, cellWidth, cellHeight);
           for (var k = 1;k < subrows[i][j]; k++) {
        let subcellHeight = cellHeight/subrows[i][j];
             stroke(255);
             strokeWeight(1);
           line(x,y+ k * subcellHeight,x+cellWidth,y+ k*subcellHeight);
        }
                }
}
    }

function mouseClicked() {
    let cellWidth = width / cols;
    let cellHeight = height / rows;

    let i = Math.floor(mouseX / cellWidth);
    let j = Math.floor(mouseY / cellHeight);

    if (i >= 0 && i < cols && j >= 0 && j < rows) {
        // Increment the click count for the clicked cell
        clickCounts[i][j]++;
        
let audiofile = mygrid[i][j].sound;
        
        if (clickCounts[i][j] == 1) {
            // First click: Highlight the cell and play sound
            fill(0, 100);
            stroke(255);
            rect(i * cellWidth, j * cellHeight, cellWidth, cellHeight);
            if (audiofile && audiofile.isLoaded() && !audiofile.isPlaying()) {
                audiofile.play();
              
            }
        } else if (clickCounts[i][j] == 2) {
            // Second click: Remove highlight and stop sound
            noFill();
            stroke(255);
            rect(i * cellWidth, j * cellHeight, cellWidth, cellHeight);
            if (audiofile && audiofile.isLoaded() && audiofile.isPlaying()) {
                audiofile.stop();
            }
            // Reset click count for this cell
            clickCounts[i][j] = 0; 
        }
    
        }
}